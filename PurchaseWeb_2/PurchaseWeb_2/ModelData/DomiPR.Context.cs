//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PurchaseWeb_2.ModelData
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class Domi_PurEntities : DbContext
    {
        public Domi_PurEntities()
            : base("name=Domi_PurEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Department_mst> Department_mst { get; set; }
        public virtual DbSet<Lgn_mst> Lgn_mst { get; set; }
        public virtual DbSet<Menu_mst> Menu_mst { get; set; }
        public virtual DbSet<Position_mst> Position_mst { get; set; }
        public virtual DbSet<Usr_mst> Usr_mst { get; set; }
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
        public virtual DbSet<RoleMenuMapping_mst> RoleMenuMapping_mst { get; set; }
        public virtual DbSet<PR_Details> PR_Details { get; set; }
        public virtual DbSet<PR_Mst> PR_Mst { get; set; }
        public virtual DbSet<UOM_mst> UOM_mst { get; set; }
        public virtual DbSet<Status_Mst> Status_Mst { get; set; }
        public virtual DbSet<PRType_mst> PRType_mst { get; set; }
        public virtual DbSet<Currency_Mst> Currency_Mst { get; set; }
        public virtual DbSet<AccCCLvl1> AccCCLvl1 { get; set; }
        public virtual DbSet<AccCCLvl2> AccCCLvl2 { get; set; }
        public virtual DbSet<AccTypeDept> AccTypeDepts { get; set; }
        public virtual DbSet<AccTypeDivision> AccTypeDivisions { get; set; }
        public virtual DbSet<AccTypeExpens> AccTypeExpenses { get; set; }
        public virtual DbSet<PR_VendorComparison> PR_VendorComparison { get; set; }
        public virtual DbSet<PO_Mst> PO_Mst { get; set; }
        public virtual DbSet<PRFile> PRFiles { get; set; }
        public virtual DbSet<MonthlyBudget> MonthlyBudgets { get; set; }
        public virtual DbSet<Month> Months { get; set; }
        public virtual DbSet<PrGroupType> PrGroupTypes { get; set; }
        public virtual DbSet<PrTypeMap> PrTypeMaps { get; set; }
        public virtual DbSet<CPRFMst> CPRFMsts { get; set; }
        public virtual DbSet<AuditPR_Log> AuditPR_Log { get; set; }
        public virtual DbSet<PO_CSV_Header> PO_CSV_Header { get; set; }
        public virtual DbSet<LastNoMst> LastNoMsts { get; set; }
        public virtual DbSet<vw_sourcingRemarksLst> vw_sourcingRemarksLst { get; set; }
        public virtual DbSet<PublicHoliday_mst> PublicHoliday_mst { get; set; }
        public virtual DbSet<ICCategory_Mst> ICCategory_Mst { get; set; }
        public virtual DbSet<MonthlyBudget_Expense> MonthlyBudget_Expense { get; set; }
        public virtual DbSet<MonthlyBudget_Mst> MonthlyBudget_Mst { get; set; }
        public virtual DbSet<Area_Mst> Area_Mst { get; set; }
        public virtual DbSet<Expenses_Mst> Expenses_Mst { get; set; }
        public virtual DbSet<Section_Mst> Section_Mst { get; set; }
        public virtual DbSet<AuditBudget_log> AuditBudget_log { get; set; }
        public virtual DbSet<MonthlyDeptBudget> MonthlyDeptBudgets { get; set; }
        public virtual DbSet<HODManager_Map> HODManager_Map { get; set; }
        public virtual DbSet<CPRF_File> CPRF_File { get; set; }
        public virtual DbSet<CprfArea_Mst> CprfArea_Mst { get; set; }
        public virtual DbSet<CPRFAsset_Mst> CPRFAsset_Mst { get; set; }
        public virtual DbSet<CPRFBudget_Mst> CPRFBudget_Mst { get; set; }
        public virtual DbSet<CprfCategory_Mst> CprfCategory_Mst { get; set; }
        public virtual DbSet<AssetCategory_Mst> AssetCategory_Mst { get; set; }
        public virtual DbSet<AuditCPRF_log> AuditCPRF_log { get; set; }
        public virtual DbSet<CostCentre_Mst> CostCentre_Mst { get; set; }
        public virtual DbSet<PRAsset_Lst> PRAsset_Lst { get; set; }
        public virtual DbSet<Category_Mst> Category_Mst { get; set; }
        public virtual DbSet<Process_Mst> Process_Mst { get; set; }
        public virtual DbSet<vw_CprfDept> vw_CprfDept { get; set; }
        public virtual DbSet<vw_usrDpt> vw_usrDpt { get; set; }
        public virtual DbSet<CPRFBudget_Dtls> CPRFBudget_Dtls { get; set; }
        public virtual DbSet<UsrPsn_Map> UsrPsn_Map { get; set; }
        public virtual DbSet<Asset_Category_Mst> Asset_Category_Mst { get; set; }
    
        public virtual ObjectResult<usp_GetMenuData_Result> usp_GetMenuData(string userId)
        {
            var userIdParameter = userId != null ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_GetMenuData_Result>("usp_GetMenuData", userIdParameter);
        }
    
        public virtual int AssignRoleMenuMap()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AssignRoleMenuMap");
        }
    
        public virtual int GetDocNo(string initial, Nullable<int> doctype, Nullable<int> docyear, ObjectParameter lastDocNo)
        {
            var initialParameter = initial != null ?
                new ObjectParameter("initial", initial) :
                new ObjectParameter("initial", typeof(string));
    
            var doctypeParameter = doctype.HasValue ?
                new ObjectParameter("doctype", doctype) :
                new ObjectParameter("doctype", typeof(int));
    
            var docyearParameter = docyear.HasValue ?
                new ObjectParameter("docyear", docyear) :
                new ObjectParameter("docyear", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetDocNo", initialParameter, doctypeParameter, docyearParameter, lastDocNo);
        }
    
        public virtual ObjectResult<GetPOListbyDate_Result> GetPOListbyDate(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetPOListbyDate_Result>("GetPOListbyDate", fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<SP_Comparison_Report_Result> SP_Comparison_Report(Nullable<int> prMstId)
        {
            var prMstIdParameter = prMstId.HasValue ?
                new ObjectParameter("PrMstId", prMstId) :
                new ObjectParameter("PrMstId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_Comparison_Report_Result>("SP_Comparison_Report", prMstIdParameter);
        }
    
        public virtual ObjectResult<SP_MonthlyDeptBudget_Result> SP_MonthlyDeptBudget(Nullable<int> monthOf, Nullable<int> yearOf)
        {
            var monthOfParameter = monthOf.HasValue ?
                new ObjectParameter("monthOf", monthOf) :
                new ObjectParameter("monthOf", typeof(int));
    
            var yearOfParameter = yearOf.HasValue ?
                new ObjectParameter("yearOf", yearOf) :
                new ObjectParameter("yearOf", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_MonthlyDeptBudget_Result>("SP_MonthlyDeptBudget", monthOfParameter, yearOfParameter);
        }
    
        public virtual ObjectResult<string> SP_ChkDeptBudgetBalance(Nullable<int> monthOf, Nullable<int> yearOf, string accCode, ObjectParameter deptBudgetBalance)
        {
            var monthOfParameter = monthOf.HasValue ?
                new ObjectParameter("monthOf", monthOf) :
                new ObjectParameter("monthOf", typeof(int));
    
            var yearOfParameter = yearOf.HasValue ?
                new ObjectParameter("yearOf", yearOf) :
                new ObjectParameter("yearOf", typeof(int));
    
            var accCodeParameter = accCode != null ?
                new ObjectParameter("accCode", accCode) :
                new ObjectParameter("accCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("SP_ChkDeptBudgetBalance", monthOfParameter, yearOfParameter, accCodeParameter, deptBudgetBalance);
        }
    
        public virtual ObjectResult<Nullable<int>> SP_ChkDeptBudgetSendToHOD(Nullable<int> monthOf, Nullable<int> yearOf, string accCode, Nullable<decimal> totalPR, ObjectParameter passFlag)
        {
            var monthOfParameter = monthOf.HasValue ?
                new ObjectParameter("monthOf", monthOf) :
                new ObjectParameter("monthOf", typeof(int));
    
            var yearOfParameter = yearOf.HasValue ?
                new ObjectParameter("yearOf", yearOf) :
                new ObjectParameter("yearOf", typeof(int));
    
            var accCodeParameter = accCode != null ?
                new ObjectParameter("accCode", accCode) :
                new ObjectParameter("accCode", typeof(string));
    
            var totalPRParameter = totalPR.HasValue ?
                new ObjectParameter("TotalPR", totalPR) :
                new ObjectParameter("TotalPR", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("SP_ChkDeptBudgetSendToHOD", monthOfParameter, yearOfParameter, accCodeParameter, totalPRParameter, passFlag);
        }
    
        public virtual ObjectResult<SP_ChkDeptBudgetSendToPurHOD_Result> SP_ChkDeptBudgetSendToPurHOD(Nullable<int> prId, string sourcingName)
        {
            var prIdParameter = prId.HasValue ?
                new ObjectParameter("PrId", prId) :
                new ObjectParameter("PrId", typeof(int));
    
            var sourcingNameParameter = sourcingName != null ?
                new ObjectParameter("SourcingName", sourcingName) :
                new ObjectParameter("SourcingName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_ChkDeptBudgetSendToPurHOD_Result>("SP_ChkDeptBudgetSendToPurHOD", prIdParameter, sourcingNameParameter);
        }
    
        public virtual int SP_ChkDeptBudgetReject(Nullable<int> prId, string sourcingName)
        {
            var prIdParameter = prId.HasValue ?
                new ObjectParameter("PrId", prId) :
                new ObjectParameter("PrId", typeof(int));
    
            var sourcingNameParameter = sourcingName != null ?
                new ObjectParameter("SourcingName", sourcingName) :
                new ObjectParameter("SourcingName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_ChkDeptBudgetReject", prIdParameter, sourcingNameParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> SP_ChkCPRFSendToHOD(string cprfNo, Nullable<int> cprfLvl, Nullable<decimal> prTotal, ObjectParameter passFlag)
        {
            var cprfNoParameter = cprfNo != null ?
                new ObjectParameter("cprfNo", cprfNo) :
                new ObjectParameter("cprfNo", typeof(string));
    
            var cprfLvlParameter = cprfLvl.HasValue ?
                new ObjectParameter("cprfLvl", cprfLvl) :
                new ObjectParameter("cprfLvl", typeof(int));
    
            var prTotalParameter = prTotal.HasValue ?
                new ObjectParameter("prTotal", prTotal) :
                new ObjectParameter("prTotal", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("SP_ChkCPRFSendToHOD", cprfNoParameter, cprfLvlParameter, prTotalParameter, passFlag);
        }
    }
}
