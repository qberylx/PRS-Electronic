@model  PurchaseWeb_2.Models.PRDtlsPurProViewModel

<style>
    /* CSS code */
    .col-centered {
        float: none;
        margin: 0 auto;
    }

    
    
</style>

<div class="row zoomedElement">
    <div class="col-md-12">
        <!--card header-->
        <div class="card card-primary">
            <div class="overlay" id="loadingForm">
                <i class="fas fa-2x fa-sync-alt fa-spin"></i>
            </div>

            <div class="card-header">
                <div class="row">
                    <div class="col-md-2 ">
                        <h3 class="card-title vertical-center">Purchase Request Details</h3>
                    </div>

                </div>
            </div>
            <!--</div>-->
            <!--card body-->
            @*using (Html.BeginForm("AddPurDtls", "Purchase",FormMethod.Post))*@
            @using (Ajax.BeginForm("AddPRDtlsPurchasingStockable2", "Purchase", new AjaxOptions { HttpMethod = "POST", UpdateTargetId = "divPurDtlsList", OnSuccess = "OnSuccessSave", LoadingElementId= "loadingForm" }))
            {
                @Html.AntiForgeryToken()
                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                @Html.HiddenFor(model => model.PRid, new { @Value = ViewBag.PrMstId })
                //@Html.HiddenFor(model => model.PRDtId, new { @Value = Model.PRDtId })
                @Html.HiddenFor(model => model.PRNo, new { @Value = ViewBag.PrNo })
                @Html.HiddenFor(model => model.TypePRId, new { @Value = ViewBag.PrTypeID })


                <div class="card-body">

                    <div class="row">

                        <div class="col-2">
                            @Html.LabelFor(model => model.DomiPartNo, htmlAttributes: new { @class = "control-label " })
                            <br />
                            <select class="fstdropdown-select custom-select form-control-border" id="SlctDomiPartNo" name="SlctDomiPartNo" onchange="domiPurChange(this.value)">
                                <option value="">NS</option>
                                @foreach (var domi in ViewBag.domipartlist)
                                {
                                    <option value='{"itemNo":"@domi.ITEMNO","vendId":"@domi.VDCODE"}'>@domi.ITEMNO - @domi.APVEN.VENDNAME </option>
                                }
                            </select>
                            <input type="hidden" name="DomiPartNo" id="DomiPartNo" value="NS" />
                            @Html.ValidationMessageFor(model => model.DomiPartNo, "", new { @class = "text-danger" })

                        </div>

                        <div class="col-1">
                            @Html.LabelFor(model => model.VendorPartNo, htmlAttributes: new { @class = "control-label " })
                            <br />
                            @Html.EditorFor(model => model.VendorPartNo, new { htmlAttributes = new { @class = "form-control" , @id = "VendorPartNo" } })
                            @Html.ValidationMessageFor(model => model.VendorPartNo, "", new { @class = "text-danger" })
                        </div>

                        <div class="col-2">
                            @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label " })
                            <br />
                            @Html.EditorFor(model => model.Description, new { htmlAttributes = new { @class = "form-control" , @id = "Description" } })
                            @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
                        </div>

                        <div class="col-2">
                            <label class="control-label ">Vendor</label>
                            <br />
                            <div id="vendorList">
                                @Html.DropDownList("VendorCode",
                                new SelectList(ViewBag.vendorPrList, "VendorCode", "VendorName"),
                                "Please Select the Vendor",
                                new { @class = "custom-select form-control-border", onchange = "vendorChange(this.value)", @required = "required" })
                                @*@Html.ValidationMessageFor(model => model.VendorCode, "", new { @class = "text-danger" })*@
                            </div>

                            @Html.ValidationMessageFor(model => model.VendorCode, "", new { @class = "text-danger" })
                        </div>

                        <div class="col-1">
                            @Html.LabelFor(model => model.Qty, htmlAttributes: new { @class = "control-label " })
                            <br />
                            @Html.EditorFor(model => model.Qty, new { htmlAttributes = new { @class = "form-control"  } })
                            @Html.ValidationMessageFor(model => model.Qty, "", new { @class = "text-danger" })
                        </div>

                        <div class="col-1">
                            <strong>UOM</strong>
                            <br />
                            <div id="divUOM">
                                @Html.DropDownList("UOMName",
                                new SelectList(ViewBag.UOMList, "UNIT", "UNIT"),
                                "Please Select the UOM",
                                new { @class = "custom-select form-control-border", @required = "required" })
                                @Html.ValidationMessageFor(model => model.UOMName, "", new { @class = "text-danger" })
                            </div>                            
                        </div>

                        <div class="col-2">
                            <strong>Unit Price</strong>
                            <br />
                            <div class="row">
                                <div class="col-md-3">
                                    <div id="divVendorHidden">
                                        @Html.DropDownList("CurCode",
                                       new SelectList(ViewBag.CurrList, "CURID", "CURID", "MYR"),
                                       new { @class = "custom-select form-control-border" })
                                    </div>
                                </div>
                                <div class="col-md-9">
                                    @Html.EditorFor(model => model.UnitPrice, new { htmlAttributes = new { @class = "form-control" , @id= "UnitPrice" } })
                                </div>
                            </div>
                            @Html.ValidationMessageFor(model => model.UnitPrice, "", new { @class = "text-danger" })
                        </div>



                    </div>
                    <br />
                    <div class="row">
                        <div class="col-3">
                            <b>Remarks</b>
                            <br />
                            @Html.TextAreaFor(model => model.Remarks, new { @class = "form-control", @rows = 3 })
                        </div>

                        <div class="col-1">
                            <strong>Req. Delivery Date</strong>
                            <br />
                            @{ string DeliveryDate = DateTime.Now.ToString("yyyy-MM-dd");}
                            @Html.TextBoxFor(model => model.ReqDevDate, "{0:dd/MM/yyyy}"
                                , new { @class = "form-control", @type = "date", @required = "true", @Value = DeliveryDate })
                            @*@Html.EditorFor(model => model.ReqDevDate, new { htmlAttributes = new { @class = "form-control" } })*@
                            @Html.ValidationMessageFor(model => model.ReqDevDate, "", new { @class = "text-danger" })
                        </div>

                        <div class="col-1">
                            <b>Device</b>
                            <br />
                            @Html.EditorFor(model => model.Device, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Device, "", new { @class = "text-danger" })
                        </div>

                        <div class="col-1">
                            <b>Sales Order</b>
                            <br />
                            @Html.EditorFor(model => model.SalesOrder, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.SalesOrder, "", new { @class = "text-danger" })
                        </div>

                    </div>


                </div>
                <div class="card-footer">
                    <div class="container">
                        <div class="row ">
                            <div class="col-md-2 col-centered ">
                                <button type="submit" id="btnSubmit" name="Submit" value="Update" class="btn btn-primary btn-lg ">Save</button>
                            </div>
                        </div>
                    </div>
                </div>
            }


        </div>
        
    </div>

</div>


<script>
    $(document).ready(function () {
        console.log("ready!");
        setFstDropdown();
    });

    function domiPurChange(itemno) {
        //console.log(itemno);
        var obj = JSON.parse(itemno);
        //console.log(obj.itemNo);
        //console.log(obj.vendId);

        $("#DomiPartNo").val(obj.itemNo);

        $.ajax({
            type: "POST",
            url: "@Url.Action("purChangeDomiPart","Purchase")",
            data: JSON.stringify({ itemno: obj.itemNo, vendId: obj.vendId }),
            contentType: "application/json; charset=utf-8",
            dataType: "JSON",
            success: function (response) {
                $("#VendorPartNo").val(response[0].VendorPartNo);
                $("#Description").val(response[0].Description);
                var inputVendorCode = '<input type="hidden" id="VendorCode" name="VendorCode" value ="' + response[0].VendorCode + '" />' +
                    '<input type="text" id="VendorName" name="VendorName" class="form-control" value="' + response[0].VendorName + '" />';

                $("#vendorList").replaceWith(inputVendorCode);

                var inputUOM = '<input type="text" id="UOMName" name="UOMName" class="form-control" value="' + response[0].UOMName + '" />';
                $("#divUOM").replaceWith(inputUOM);

                var inputCur = '<input type="text" id="CurCode" name="CurCode" class="form-control" value="' + response[0].CurCode + '" />';
                $("#divVendorHidden").replaceWith(inputCur);

                $("#UnitPrice").val(response[0].UnitPrice);

                console.log(response[0].Description);

            },
            failure: function (response) {
                alert(response.responseText);
            },
            error: function (response) {
                alert(response.responseText);
            }
        });

    }

    function vendorChange(vendorCode) {
        console.log(vendorCode);
        $.ajax({
            type: "POST",
            url: "@Url.Action("callVendorHidden","Purchase")",
            data: '{vendorCode: "' + vendorCode + '" }',
            contentType: "application/json; charset=utf-8",
            dataType: "html",
            success: function (response) {
                $('#divVendorHidden').html(response);
            },
            failure: function (response) {
                alert(response.responseText);
            },
            error: function (response) {
                alert(response.responseText);
            }
        });
    }

    function OnSuccessSave() {
        this.reset();
        var PrMstId = $("#PRid").val();
        //$("#divPRDtlsForm").html();
        $.ajax({
            type: "POST",
            url: "@Url.Action("AddPRDtlsPurchasingStockable", "Purchase")",
            data: '{PrMstId: "' + PrMstId + '" }',
            contentType: "application/json; charset=utf-8",
            dataType: "html",
            success: function (response) {
                $('#divPRDtlsForm').html(response);
            },
            failure: function (response) {
                alert(response.responseText);
            },
            error: function (response) {
                alert(response.responseText);
            }
        });
    }
</script>

<style>
    div#loadingForm {
        display: none;
    }
</style>