@model  PurchaseWeb_2.Models.PRDtlsPurProViewModel

<style>
    /* CSS code */
    .col-centered {
        float: none;
        margin: 0 auto;
    }
</style>

<div class="row zoomedElement">
    <div class="col-md-12">
        <!--card header-->
        <div class="card card-primary">
            <div class="card-header">
                <div class="row">
                    <div class="col-md-2 ">
                        <h3 class="card-title vertical-center">Purchase Request Details</h3>
                    </div>

                </div>
            </div>
        </div>
        <!--card body-->
        @*using (Html.BeginForm("AddPurDtls", "Purchase",FormMethod.Post))*@
        @using (Ajax.BeginForm("AddPRDtlsPurchasingStockable2", "Purchase", new AjaxOptions { HttpMethod = "POST", UpdateTargetId = "divPurDtlsList", OnSuccess = "OnSuccess" }))
        {
            @Html.AntiForgeryToken()
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            @Html.HiddenFor(model => model.PRid, new { @Value = ViewBag.PrMstId })
            //@Html.HiddenFor(model => model.PRDtId, new { @Value = Model.PRDtId })
            @Html.HiddenFor(model => model.PRNo, new { @Value = ViewBag.PrNo })
            @Html.HiddenFor(model => model.TypePRId, new { @Value = ViewBag.PrTypeID })


            <div class="card-body">
                <div class="row">

                    <div class="col-1">
                        @Html.LabelFor(model => model.DomiPartNo, htmlAttributes: new { @class = "control-label " })
                        <br />
                        <select class="custom-select form-control-border" id="DomiPartNo" name="DomiPartNo" onchange="domiChange(this.value)">
                            <option value="NS">NS</option>
                        </select>
                        @Html.ValidationMessageFor(model => model.DomiPartNo, "", new { @class = "text-danger" })

                    </div>

                    <div class="col-1">
                        @Html.LabelFor(model => model.VendorPartNo, htmlAttributes: new { @class = "control-label " })
                        <br />
                        @Html.EditorFor(model => model.VendorPartNo, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.VendorPartNo, "", new { @class = "text-danger" })
                    </div>

                    <div class="col-3">
                        @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label " })
                        <br />
                        @Html.EditorFor(model => model.Description, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
                    </div>

                    <div class="col-2">
                        <label class="control-label ">Vendor</label>
                        <br />
                        <div id="vendorList">
                            @Html.DropDownList("VendorCode",
                            new SelectList(ViewBag.vendorPrList, "VendorCode", "VendorName"),
                            "Please Select the Vendor",
                            new { @class = "custom-select form-control-border", onchange = "vendorChange(this.value)" })
                            @Html.ValidationMessageFor(model => model.VendorCode, "", new { @class = "text-danger" })
                        </div>
                        
                        @Html.ValidationMessageFor(model => model.VendorCode, "", new { @class = "text-danger" })
                    </div>

                    <div class="col-1">
                        @Html.LabelFor(model => model.Qty, htmlAttributes: new { @class = "control-label col-md-2" })
                        <br />
                        @Html.EditorFor(model => model.Qty, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Qty, "", new { @class = "text-danger" })
                    </div>

                    <div class="col-1">
                        <strong>UOM</strong>
                        <br />
                        @Html.DropDownList("UOMName",
                            new SelectList(ViewBag.UOMList, "UNIT", "UNIT"),
                            "Please Select the UOM",
                            new { @class = "custom-select form-control-border" })
                        @Html.ValidationMessageFor(model => model.UOMName, "", new { @class = "text-danger" })
                    </div>

                    <div class="col-2">
                        <strong>Unit Price</strong>
                        <br />
                        <div class="row">
                            <div class="col-md-3">
                                <div id="divVendorHidden">
                                    @Html.DropDownList("CurCode",
                                   new SelectList(ViewBag.CurrList, "CURID", "CURID", "MYR"),
                                   new { @class = "custom-select form-control-border" })
                                </div>                                
                            </div>
                            <div class="col-md-9">
                                @Html.EditorFor(model => model.UnitPrice, new { htmlAttributes = new { @class = "form-control" } })
                            </div>
                        </div>
                        @Html.ValidationMessageFor(model => model.UnitPrice, "", new { @class = "text-danger" })
                    </div>



                </div>
                <br />
                <div class="row">
                    <div class="col-3">
                        <b>Remarks</b>
                        <br />
                        @Html.TextAreaFor(model => model.Remarks, new { @class = "form-control", @rows = 3 })
                    </div>

                    <div class="col-1">
                        <strong>Req. Delivery Date</strong>
                        <br />
                        @Html.EditorFor(model => model.ReqDevDate, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.ReqDevDate, "", new { @class = "text-danger" })
                    </div>

                    <div class="col-1">
                        <b>Device</b>
                        <br />
                        @Html.EditorFor(model => model.Device, new { htmlAttributes = new { @class = "form-control"  } })
                        @Html.ValidationMessageFor(model => model.Device, "", new { @class = "text-danger" })
                    </div>

                    <div class="col-1">
                        <b>Sales Order</b>
                        <br />
                        @Html.EditorFor(model => model.SalesOrder, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.SalesOrder, "", new { @class = "text-danger" })
                    </div>

                </div>


            </div>
            <div class="card-footer">
                <div class="container">
                    <div class="row ">
                        <div class="col-md-2 col-centered ">
                            <button type="submit" id="btnSubmit" name="Submit" value="Update" class="btn btn-primary btn-lg ">Save</button>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>

</div>

<script>
    function vendorChange(vendorCode) {
        console.log(vendorCode);
        $.ajax({
            type: "POST",
            url: "@Url.Action("callVendorHidden","Purchase")",
            data: '{vendorCode: "' + vendorCode + '" }',
            contentType: "application/json; charset=utf-8",
            dataType: "html",
            success: function (response) {
                $('#divVendorHidden').html(response);
            },
            failure: function (response) {
                alert(response.responseText);
            },
            error: function (response) {
                alert(response.responseText);
            }
        });
    }
</script>
