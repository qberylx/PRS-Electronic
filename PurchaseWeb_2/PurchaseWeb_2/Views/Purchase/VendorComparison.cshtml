
    @model PurchaseWeb_2.Models.VendorComparisonModel

    @*using (Html.BeginForm("VendorComparison", "Purchase", FormMethod.Post)) *@
    @using (Ajax.BeginForm("VendorComparison", "Purchase", new AjaxOptions { HttpMethod = "POST", UpdateTargetId = "DivVendorCompareList" + @ViewBag.PrDtlstId, OnSuccess = "OnSuccess(" + @ViewBag.PrDtlstId + ", " + @ViewBag.Qty + ")" }))
    {
        @Html.AntiForgeryToken()
        
        
        
        <div class="row">
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            
            <div class="col-2">
                <div class="custom-control custom-switch">
                    &nbsp; <input type="checkbox" class="custom-control-input" id="swNewVendor" onchange="swNewVendorChg(@ViewBag.PrDtlstId)" />
                           <label class="custom-control-label" for="swNewVendor">Vendor not in the list?</label>
                </div>
            </div>

            <div class="col-md-3">
                Vendor name
                <div id="divVendorList_@ViewBag.PrDtlstId">
                    <select class="fstdropdown-select form-control-border" id="VendorCode" name="VendorCode" onchange="getCurCode(this.value, @ViewBag.PrDtlstId)">
                        <option value="">Select option</option>
                        @foreach (var vd in ViewBag.vdLst)
                        {
                            <option value="@vd.VENDORID">@vd.VENDORID - @vd.VENDNAME</option>
                        }
                    </select>
                </div>
                
                <br />
                @Html.ValidationMessageFor(model => model.VendorCode, "", new { @class = "text-danger" })
            </div>

            <div class="col-md-1">
                Current Price <br />
                @Html.EditorFor(model => model.CurPrice, new { htmlAttributes = new { @class = "form-control", @onfocusout = "UpdatePrice(this.value, " + @ViewBag.PrDtlstId + ", " + @ViewBag.Qty + " )", @Value = "0.00", @kiraCurP = ViewBag.PrDtlstId } }) <br />
                @Html.ValidationMessageFor(model => model.CurPrice, "", new { @class = "text-danger" })
            </div>

            <div class="col-md-2">
                Currency Exch. Rate<br />
                <div id="divCurCode_@ViewBag.PrDtlstId">
                    @{ Html.RenderAction("getCurCode", "Purchase");}
                </div>
            </div>

            <div class="col-2">
                Current Price (MYR) <br />
                @Html.EditorFor(model => model.CurPriceMYR, new { htmlAttributes = new { @class = "form-control", @onchange = "UpdatePrice(this.value, " + @ViewBag.PrDtlstId + ", " + @ViewBag.Qty + " )", @Value = "0.00", @kiraCurPMYR = ViewBag.PrDtlstId } }) <br />
                @Html.ValidationMessageFor(model => model.CurPriceMYR, "", new { @class = "text-danger" })
            </div>

            <div class="col-md-2">
                Quote. Date <br />
                @Html.EditorFor(model => model.QuoteDate, new { htmlAttributes = new { @class = "form-control" } }) <br />
                @Html.ValidationMessageFor(model => model.QuoteDate, "", new { @class = "text-danger" })
            </div>
            <div class="col-md-1">
                Last Price (MYR)<br />
                @Html.EditorFor(model => model.LastPrice, new { htmlAttributes = new { @class = "form-control", @Value = ViewBag.lastPrice, @kiraLastP = ViewBag.PrDtlstId, @onfocusout = "UpdateCostDown(this.value , " + @ViewBag.PrDtlstId + " )" } }) <br />
                @Html.ValidationMessageFor(model => model.LastPrice, "", new { @class = "text-danger" })
            </div>
            <div class="col-md-2" style="display:none">
                Quote. Date <br />
                @Html.EditorFor(model => model.LastQuoteDate, new { htmlAttributes = new { @class = "form-control" } }) <br />
                @Html.ValidationMessageFor(model => model.LastQuoteDate, "", new { @class = "text-danger" })
            </div>
            <div class="col-md-2" style="display:none">
                PO. Date <br />
                @Html.EditorFor(model => model.PODate, new { htmlAttributes = new { @class = "form-control" } }) <br />
                @Html.ValidationMessageFor(model => model.PODate, "", new { @class = "text-danger" })
            </div>


        </div>
        <div class="row">
            <div class="col-md-1">
                Cost Down % <br />
                @Html.EditorFor(model => model.CostDown, new { htmlAttributes = new { @class = "form-control", @Value = "0.00", @kiraCostD = ViewBag.PrDtlstId } }) <br />
                @Html.ValidationMessageFor(model => model.CostDown, "", new { @class = "text-danger" })
            </div>

            <div class="col-md-1 pr-3">
                <div class="custom-control custom-switch">
                    <input type="checkbox" class="custom-control-input" id="csDiscount_@ViewBag.PrDtlstId" onchange="chgDiscount(this , @ViewBag.PrDtlstId)">
                    <label class="custom-control-label" for="csDiscount_@ViewBag.PrDtlstId">Discount?</label>
                </div>
                <br />
                <div id="divRdDisc_@ViewBag.PrDtlstId" style="display:none">
                    <input type="radio" id="percent_@ViewBag.PrDtlstId" name="rdDiscount" value="percent" onclick="cghRdDisc( this.value, @ViewBag.PrDtlstId)">
                    <label for="percent">%</label>
                    <input type="radio" id="amount_@ViewBag.PrDtlstId" name="rdDiscount" value="amount" onclick="cghRdDisc( this.value, @ViewBag.PrDtlstId)">
                    <label for="amount">Amount</label>
                    <input type="hidden" id="discType_@ViewBag.PrDtlstId" name="DiscType" value="0" />
                </div>

            </div>

            <div class="col-md-1 pr-3" id="divDiscount_@ViewBag.PrDtlstId" style="display:none">
                Discount % <br /> <input type="text" id="percentDisc" name="percentDisc" value="0.00" onchange="cghPerDisc(this.value, @ViewBag.PrDtlstId)" />
            </div>

            <div class="col-md-2 pr-3">
                Total Amount (Exc) <br chgCurRate />
                @Html.EditorFor(model => model.TotCostnoTax, new { htmlAttributes = new { @class = "form-control", @kiraTAE = ViewBag.PrDtlstId, @Value = "0.00" } }) <br />
                @Html.ValidationMessageFor(model => model.TotCostnoTax, "", new { @class = "text-danger" })
                @Html.HiddenFor(model => model.TotCostnoTaxVendorCur, new { @class = "form-control", @kiraTAEvd = ViewBag.PrDtlstId, @Value = "0.00" })
            </div>
            &nbsp;
            <div class="col-md-1 pr-3">
                Tax %<br />
                @Html.EditorFor(model => model.Tax, new { htmlAttributes = new { @class = "form-control", @Value = "0", @kiraTax = ViewBag.PrDtlstId, @onfocusout = "UpdateTax(this.value , " + @ViewBag.PrDtlstId + " , " + @ViewBag.Qty + ")" } }) <br />
                @Html.ValidationMessageFor(model => model.Tax, "", new { @class = "text-danger" })
            </div>
            &nbsp;
            <div class="col-md-2 pr-3">
                Total Amount (Icl)<br />
                @Html.EditorFor(model => model.TotCostWitTax, new { htmlAttributes = new { @class = "form-control", @Value = "0.00", @kiraTAI = ViewBag.PrDtlstId } }) <br />
                @Html.ValidationMessageFor(model => model.TotCostWitTax, "", new { @class = "text-danger" })
                @Html.HiddenFor(model => model.TotCostWitTaxVendorCur, new { @class = "form-control", @kiraTAIvd = ViewBag.PrDtlstId, @Value = "0.00" })
            </div>
            &nbsp;
            <div class="col-md-2 pr-3">
                Payment Terms<br />
                <div id="divTerms_@ViewBag.PrDtlstId">
                    <select class="fstdropdown-select form-control-border" id="PayTerms" name="PayTerms">
                        <option value="">Select option</option>
                        @foreach (var vd in ViewBag.termlist)
                        {
                            <option value="@vd.TERMSCODE">@vd.TERMSCODE - @vd.CODEDESC</option>
                        }
                    </select>
                </div>
                
                @Html.ValidationMessageFor(model => model.PayTerms, "", new { @class = "text-danger" })
            </div>
            &nbsp;
            <div class="col-md-1 pr-3">
                Tax Code<br />
                @Html.EditorFor(model => model.TaxCode, new { htmlAttributes = new { @class = "form-control", @Value = "SSTG" } }) <br />
                @Html.ValidationMessageFor(model => model.TaxCode, "", new { @class = "text-danger" })
            </div>

            &nbsp;
            <div class="col-md-1 pr-3">
                Tax Class<br />
                @Html.EditorFor(model => model.TaxClass, new { htmlAttributes = new { @class = "form-control", @Value = "1" } }) <br />
                @Html.ValidationMessageFor(model => model.TaxClass, "", new { @class = "text-danger" })
            </div>
            <div class="col-md-1">
                <br />
                <input type="hidden" value="@ViewBag.PrDtlstId" id="PrDtlstId" name="PrDtlstId" />
                <input type="hidden" value="@ViewBag.Qty" id="PrdtlsQty" name="PrdtlsQty" />
                <button class="btn btn-success"><i class="fa fa-plus-circle"> Add</i></button>
            </div>
        </div>


    }

<script type="text/javascript">
        function OnSuccess(PrDtlstId,Qty) {
            console.log("OnSuccess prDtId=" + PrDtlstId);
            console.log("OnSuccess Qty=" + Qty);

            $("[kiraCurP=" + PrDtlstId + "]").val(0);

            UpdatePrice(0, PrDtlstId, Qty);


    }


    function UpdatePrice(Price, PrDtlstId, Qty) {
        console.log("UpdatePrice Price=" + Price + " Qty=" + Qty);

        var curRate = $("[curRate=" + PrDtlstId + "]").val();
        var totamtVd = Qty * Price;
        var totamt = Qty * Price * curRate ;

        // update cost MYR
        $("[kiraCurPMYR=" + PrDtlstId + "]").val(totamt.toFixed(2));
        $("[kiraCurPMYR=" + PrDtlstId + "]").attr("value", totamt.toFixed(2));

        // update tot cost no tax

        $("[kiraTAE=" + PrDtlstId + "]").val(totamt.toFixed(2));
        $("[kiraTAE=" + PrDtlstId + "]").attr("value", totamt.toFixed(2));

        $("[kiraTAEvd=" + PrDtlstId + "]").val(totamtVd.toFixed(2));
        $("[kiraTAEvd=" + PrDtlstId + "]").attr("value", totamtVd.toFixed(2));
        console.log("kiraTAEvd=" + $("[kiraTAEvd=" + PrDtlstId + "]").val());

        // update tot cost with tax
        var taxamt = $("[kiraTax=" + PrDtlstId + "]").val() / 100 * totamt;
        $("[kiraTAI=" + PrDtlstId + "]").val((taxamt + totamt).toFixed(2));
        $("[kiraTAIvd=" + PrDtlstId + "]").val((taxamt + totamtVd).toFixed(2));
        console.log("kiraTAIvd=" + $("[kiraTAIvd=" + PrDtlstId + "]").val());

        // calc Costdown
        var lastPrice = $("[kiraLastP=" + PrDtlstId + "]").val();
        if (lastPrice <= 0) {
            $("[kiraCostD=" + PrDtlstId + "]").val(0);
        } else {
            var curPrice = $("[kiraCurPMYR=" + PrDtlstId + "]").val();
            var costDown = (lastPrice - curPrice) / lastPrice * 100;
            $("[kiraCostD=" + PrDtlstId + "]").val(costDown.toFixed(2));
        }
    }

    function UpdateCostDown(lastPrice, PrDtlstId) {
        // calc Costdown
        //var lastPrice = $("[kiraLastP=" + PrDtlstId + "]").val();
        if (lastPrice <= 0) {
            $("[kiraCostD=" + PrDtlstId + "]").val(0);
        } else {
            var curPrice = $("[kiraCurP=" + PrDtlstId + "]").val();
            var costDown = (lastPrice - curPrice) / lastPrice * 100;
            $("[kiraCostD=" + PrDtlstId + "]").val(costDown.toFixed(2));
        }
    }

    function UpdateTax(tax, PrDtlstId, Qty) {
        var curPrice = $("[kiraCurPMYR=" + PrDtlstId + "]").val();
        var totamt = Qty * curPrice;

        var curPriceVd = $("[kiraCurP=" + PrDtlstId + "]").val();
        var totamtVd = Qty * curPriceVd;

        //check discount
        //chk if rdio percent is checked
        if ($("#percent_" + PrDtlstId + "").prop("checked") == true) {
            console.log("percent is checked.");
            //percentDisc_ tax amount
            var DiscAmt = $("#percentDisc_" + PrDtlstId + "").val() / 100 * totamt;
            totamt = totamt - DiscAmt;

            //percentDisc_ tax amount Vendor
            var DiscAmtVd = $("#percentDisc_" + PrDtlstId + "").val() / 100 * totamtVd;
            totamtVd = totamtVd - DiscAmt;

        } else if ($("#amount_" + PrDtlstId + "").prop("checked") == true)
        {
            console.log("amount is checked.");
            //amountDisc_ tax amount
            var DiscAmt = $("#amountDisc_" + PrDtlstId + "").val();
            totamt = totamt - DiscAmt;

            //amountDisc_ tax amount
            var DiscAmtVd = $("#amountDisc_" + PrDtlstId + "").val();
            totamtVd = totamtVd - DiscAmt;
        }

        //update tot no tax
        $("[kiraTAE=" + PrDtlstId + "]").val(totamt.toFixed(2));
        $("[kiraTAE=" + PrDtlstId + "]").attr("value", totamt.toFixed(2));

        $("[kiraTAEvd=" + PrDtlstId + "]").val(totamtVd.toFixed(2));
        $("[kiraTAEvd=" + PrDtlstId + "]").attr("value", totamtVd.toFixed(2));

        //update tot after tzx
        var taxamt = tax / 100 * totamt;
        $("[kiraTAI=" + PrDtlstId + "]").val((taxamt + totamt).toFixed(2));

        var taxamtVd = tax / 100 * totamtVd;
        $("[kiraTAIvd=" + PrDtlstId + "]").val((taxamtVd + totamtVd).toFixed(2));
    }

    $(function () {
        $('input#CurPrice').blur(function () {
            var textAmt = (this.value).replace(/,/g, "");
            var amt = parseFloat(this.value);
            $(this).val(amt.toFixed(5));
        });
    });

    $(function () {
        $('input#LastPrice').blur(function () {
            var textAmt = (this.value).replace(/,/g, "");
            var amt = parseFloat(this.value);
            $(this).val(amt.toFixed(5));
        });
    });

    function getCurCode(vdCode, PrDtlstId) {
        console.log(vdCode);
        console.log(PrDtlstId);
        $.ajax({
            type: "POST",
            url: "@Url.Action("getCurCode","Purchase")",
            data: JSON.stringify({ vdCode: vdCode, PrDtlstId: PrDtlstId }),
            contentType: "application/json; charset=utf-8",
            dataType: "html",
            success: function (response) {
                $('#divCurCode_' + PrDtlstId + '').html(response);

            },
            failure: function (response) {
                alert(response.responseText);
            }
        });

        $.ajax({
            type: "POST",
            url: "@Url.Action("getTermsCode","Purchase")",
            data: JSON.stringify({ vdCode: vdCode, PrDtlstId: PrDtlstId }),
            contentType: "application/json; charset=utf-8",
            dataType: "html",
            success: function (response) {
                $('#divTerms_' + PrDtlstId + '').html(response);

            },
            failure: function (response) {
                alert(response.responseText);
            }
        });
    }

    function chgCurRate(curRate, PrDtlstId, Qty) {
        console.log(curRate);
        console.log(PrDtlstId);

        // get cur price time exchange rate
        var curPrice = $("[kiraCurP=" + PrDtlstId + "]").val();
        var curPriceRate = curRate * curPrice;

        // update MYR current price
        $("[kiraCurPMYR=" + PrDtlstId + "]").val(curPriceRate.toFixed(5));

        var totamt = Qty * curPriceRate;

        // update tot no tax
        $("[kiraTAE=" + PrDtlstId + "]").val(totamt.toFixed(2));
        $("[kiraTAE=" + PrDtlstId + "]").attr("value", totamt.toFixed(2));


        // calc tax and tot with tax
        var taxamt = $("[kiraTax=" + PrDtlstId + "]").val() / 100 * totamt;
        $("[kiraTAI=" + PrDtlstId + "]").val((taxamt + totamt).toFixed(2));


        // calc Costdown
        var lastPrice = $("[kiraLastP=" + PrDtlstId + "]").val();
        if (lastPrice <= 0) {
            $("[kiraCostD=" + PrDtlstId + "]").val(0);
        } else {
            var curPrice = $("[kiraCurPMYR=" + PrDtlstId + "]").val();
            var costDown = (lastPrice - curPrice) / lastPrice * 100;
            $("[kiraCostD=" + PrDtlstId + "]").val(costDown.toFixed(2));
        }

    }

    function chgDiscount(tggleDis, PrDtlstId) {
        if ($(tggleDis).prop("checked") == true) {
            $("#divRdDisc_" + PrDtlstId + "").show();
            console.log("Checkbox is checked.");
        }
        else if ($(tggleDis).prop("checked") == false) {
            $("#divDiscount_" + PrDtlstId + "").hide();
            $("#divDiscount_" + PrDtlstId + "").html("");
            $("#divRdDisc_" + PrDtlstId + "").hide();
            console.log("Checkbox is unchecked.");
        }
    }

    function cghRdDisc(rValue, PrDtlstId) {
        if (rValue == "percent") {
            $("#divDiscount_" + PrDtlstId + "").show();
            $("#divDiscount_" + PrDtlstId + "").html("Discount % <br /> <input type='text' id='percentDisc_" + PrDtlstId + "' name='Discount' value='0.00' onfocusout='cghPerDisc(this.value, " + PrDtlstId + ")' class='form-control'/>");
            //discType_
            $("#discType_" + PrDtlstId + "").val(1);
        } else if (rValue == "amount") {
            $("#divDiscount_" + PrDtlstId + "").show();
            $("#divDiscount_" + PrDtlstId + "").html("Discount Amt.<br /> <input type='text' id='amountDisc_" + PrDtlstId + "' name='Discount' value='0.00' onfocusout='cghAmtDisc(this.value, " + PrDtlstId + ")' class='form-control'/>");
            $("#discType_" + PrDtlstId + "").val(2);
        }
    }

    function cghPerDisc(PerDisc, PrDtlstId) {
        console.log(PerDisc);
        console.log(PrDtlstId);

        // update tot no tax after discount
        var totAmt = $("[kiraTAE=" + PrDtlstId + "]").val();
        console.log(totAmt);
        var DiscAmt = PerDisc / 100 * totAmt;
        var DiscTotAmt = totAmt - DiscAmt;
        console.log(DiscAmt);
        $("[kiraTAE=" + PrDtlstId + "]").val(DiscTotAmt.toFixed(2));

        //update tot no tax in vd currency discount
        var totAmtvd = $("[kiraTAEvd=" + PrDtlstId + "]").val();
        console.log("totAmtvd=" + totAmtvd);
        var DiscAmtvd = PerDisc / 100 * totAmtvd;
        var DiscTotAmtvd = totAmtvd - DiscAmtvd;
        console.log("DiscAmtvd="+DiscAmtvd);
        $("[kiraTAEvd=" + PrDtlstId + "]").val(DiscTotAmtvd.toFixed(2));

        // calculate tax and tot amt after tax
        var taxamt = $("[kiraTax=" + PrDtlstId + "]").val() / 100 * DiscTotAmt;
        console.log(taxamt);
        $("[kiraTAI=" + PrDtlstId + "]").val((taxamt + DiscTotAmt).toFixed(2));

        // calculate tax and tot amt after tax vendor currency
        var taxamtvd = $("[kiraTaxvd=" + PrDtlstId + "]").val() / 100 * DiscTotAmtvd;
        console.log(taxamtvd);
        $("[kiraTAIvd=" + PrDtlstId + "]").val((taxamtvd + DiscTotAmtvd).toFixed(2));

        // calc Costdown
        var lastPrice = $("[kiraLastP=" + PrDtlstId + "]").val();
        if (lastPrice <= 0) {
            $("[kiraCostD=" + PrDtlstId + "]").val(0);
        } else {
            var curPrice = $("[kiraCurPMYR=" + PrDtlstId + "]").val();
            var costDown = (lastPrice - curPrice) / lastPrice * 100;
            $("[kiraCostD=" + PrDtlstId + "]").val(costDown.toFixed(2));
        }
    }

    function cghAmtDisc(AmtDisc, PrDtlstId) {
        console.log(AmtDisc);
        console.log(PrDtlstId);
        var totAmt = $("[kiraTAE=" + PrDtlstId + "]").val();
        console.log(totAmt);
        var DiscAmt = AmtDisc;
        var DiscTotAmt = totAmt - DiscAmt;
        console.log(DiscAmt);
        $("[kiraTAE=" + PrDtlstId + "]").val(DiscTotAmt);

        var taxamt = $("[kiraTax=" + PrDtlstId + "]").val() / 100 * DiscTotAmt;
        console.log(taxamt);
        $("[kiraTAI=" + PrDtlstId + "]").val((taxamt + DiscTotAmt).toFixed(2));

        // calc Costdown
        var lastPrice = $("[kiraLastP=" + PrDtlstId + "]").val();
        if (lastPrice <= 0) {
            $("[kiraCostD=" + PrDtlstId + "]").val(0);
        } else {
            var curPrice = $("[kiraCurP=" + PrDtlstId + "]").val();
            var costDown = (lastPrice - curPrice) / lastPrice * 100;
            $("[kiraCostD=" + PrDtlstId + "]").val(costDown.toFixed(2));
        }
    }

    function swNewVendorChg(PrDtlstId) {
        if ($("#swNewVendor").is(":checked")) {

            $.ajax({
                type: "POST",
                url: "@Url.Action("callNewVendor","Purchase")",
                data: '',
                contentType: "application/json; charset=utf-8",
                dataType: "html",
                success: function (response) {
                    $('#divVendorList_' + PrDtlstId).html(response);
                },
                failure: function (response) {
                    alert(response.responseText);
                },
                error: function (response) {
                    alert(response.responseText);
                }
            });

        } else {

            $.ajax({
                type: "POST",
                url: "@Url.Action("callVendorList","Purchase")",
                data: '',
                contentType: "application/json; charset=utf-8",
                dataType: "html",
                success: function (response) {
                    $('#divVendorList_' + PrDtlstId).html(response);
                },
                failure: function (response) {
                    alert(response.responseText);
                },
                error: function (response) {
                    alert(response.responseText);
                }
            });

        }
    }

</script>


